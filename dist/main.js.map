{"version":3,"file":"main.js","mappings":"qCAAe,MAAMA,EACjBC,YAAY,GAAwE,IAAxE,SAAEC,EAAQ,SAAEC,EAAQ,MAAEC,EAAQ,EAAC,UAAEC,EAAY,EAAC,OAAEC,EAAS,CAACC,EAAG,EAAGC,EAAG,IAAG,EAC9EC,KAAKP,SAAWA,EAChBO,KAAKC,MAAQ,GACbD,KAAKE,OAAS,IACdF,KAAKG,MAAQ,IAAIC,MACjBJ,KAAKG,MAAME,IAAMX,EACjBM,KAAKL,MAAQA,EACbK,KAAKJ,UAAYA,EACjBI,KAAKM,cAAgB,EACrBN,KAAKO,cAAgB,EACrBP,KAAKQ,WAAa,GAClBR,KAAKH,OAASA,CAClB,CAEAY,OACmBC,SAASC,cAAc,UACrBC,WAAW,MAE1BC,UACEb,KAAKG,MACLH,KAAKO,eAAiBP,KAAKG,MAAMF,MAAQD,KAAKJ,WAC9C,EACAI,KAAKG,MAAMF,MAAQD,KAAKJ,UACxBI,KAAKG,MAAMD,OACXF,KAAKP,SAASK,EAAIE,KAAKH,OAAOC,EAC9BE,KAAKP,SAASM,EAAIC,KAAKH,OAAOE,EAC7BC,KAAKG,MAAMF,MAAQD,KAAKJ,UAAaI,KAAKL,MAC3CK,KAAKG,MAAMD,OAASF,KAAKL,MACjC,CACAmB,gBACId,KAAKM,gBAEDN,KAAKM,cAAgBN,KAAKQ,YAAe,IACrCR,KAAKO,cAAgBP,KAAKJ,UAAY,EACtCI,KAAKO,gBAELP,KAAKO,cAAgB,EAGjC,CACAQ,SACIf,KAAKS,OACLT,KAAKc,eACT,EC1CW,MAAME,UAAgBzB,EACjCC,YAAY,GAUT,IAVS,SACRC,EAAQ,SACRwB,EAAQ,MACRC,EAAQ,QAAO,SACfxB,EAAQ,MACRC,EAAQ,EAAC,UACTC,EAAY,EAAC,OACbC,EAAS,CAACC,EAAG,EAAGC,EAAG,GAAE,QACrBoB,EAAO,UACPC,EAAY,CAACvB,OAAO,CAAC,EAAGI,WAAOoB,EAAWnB,YAAQmB,IACrD,EACGC,MAAM,CACF7B,WACAC,WACAC,QACAC,YACAC,WAGJG,KAAKiB,SAAWA,EAChBjB,KAAKC,MAAQ,GACbD,KAAKE,OAAS,IACdF,KAAKuB,QACLvB,KAAKoB,UAAY,CACb3B,SAAU,CACNK,EAAGE,KAAKP,SAASK,EACjBC,EAAGC,KAAKP,SAASM,GAErBF,OAAQuB,EAAUvB,OAClBI,MAAOmB,EAAUnB,MACjBC,OAAQkB,EAAUlB,QAEtBF,KAAKkB,MAAQA,EACblB,KAAKwB,YACLxB,KAAKyB,OAAS,IACdzB,KAAKM,cAAgB,EACrBN,KAAKO,cAAgB,EACrBP,KAAKQ,WAAa,GAClBR,KAAKmB,QAAUA,EACfnB,KAAK0B,MAAO,EAEZ,IAAK,MAAMC,KAAU3B,KAAKmB,QACtBA,EAAQQ,GAAQxB,MAAQ,IAAIC,MAC5Be,EAAQQ,GAAQxB,MAAME,IAAMc,EAAQQ,GAAQjC,QAGpD,CAEAqB,SACI,MAAMa,EAASlB,SAASC,cAAc,UAGtCX,KAAKS,OACAT,KAAK0B,MAAM1B,KAAKc,gBAGrBd,KAAKoB,UAAU3B,SAASK,EAAIE,KAAKP,SAASK,EAAIE,KAAKoB,UAAUvB,OAAOC,EACpEE,KAAKoB,UAAU3B,SAASM,EAAIC,KAAKP,SAASM,EAAIC,KAAKoB,UAAUvB,OAAOE,EAEpEC,KAAKP,SAASK,GAAKE,KAAKiB,SAASnB,EACjCE,KAAKP,SAASM,GAAKC,KAAKiB,SAASlB,EAE7BC,KAAKP,SAASM,EAAIC,KAAKE,OAASF,KAAKiB,SAASlB,GAAK6B,EAAO1B,OAAS,IACnEF,KAAKiB,SAASlB,EAAI,EAClBC,KAAKP,SAASM,EAAI,KACfC,KAAKiB,SAASlB,GAfL,EAgBpB,CACA8B,SACI7B,KAAK8B,cAAc,WACnB9B,KAAKwB,aAAc,CAEvB,CAEAO,UACI/B,KAAKyB,QAAU,GACXzB,KAAKyB,QAAU,EACfzB,KAAK8B,cAAc,SACjB9B,KAAK8B,cAAc,UAC7B,CACAA,cAAcH,GAEV,GAAI3B,KAAKG,QAAUH,KAAKmB,QAAQa,MAAM7B,OAMtC,KAAIH,KAAKG,QAAUH,KAAKmB,QAAQc,QAAQ9B,OACpCH,KAAKO,cAAgBP,KAAKmB,QAAQc,QAAQrC,UAAY,GAItDI,KAAKG,QAAUH,KAAKmB,QAAQY,QAAQ5B,OACpCH,KAAKO,cAAgBP,KAAKmB,QAAQY,QAAQnC,UAAW,GAEzD,OAAQ+B,GACJ,IAAK,OACG3B,KAAKG,QAAUH,KAAKmB,QAAQe,KAAK/B,QACjCH,KAAKG,MAAQH,KAAKmB,QAAQe,KAAK/B,MAC/BH,KAAKJ,UAAYI,KAAKmB,QAAQe,KAAKtC,UACnCI,KAAKO,cAAgB,GAEzB,MACJ,IAAK,MACGP,KAAKG,QAAUH,KAAKmB,QAAQgB,IAAIhC,QAChCH,KAAKG,MAAQH,KAAKmB,QAAQgB,IAAIhC,MAC9BH,KAAKJ,UAAYI,KAAKmB,QAAQgB,IAAIvC,UAClCI,KAAKO,cAAgB,GAEzB,MACJ,IAAK,OACGP,KAAKG,QAAUH,KAAKmB,QAAQiB,KAAKjC,QACjCH,KAAKG,MAAQH,KAAKmB,QAAQiB,KAAKjC,MAC/BH,KAAKJ,UAAYI,KAAKmB,QAAQiB,KAAKxC,UACnCI,KAAKO,cAAgB,GAEzB,MACJ,IAAK,OACGP,KAAKG,QAAUH,KAAKmB,QAAQkB,KAAKlC,QACjCH,KAAKG,MAAQH,KAAKmB,QAAQkB,KAAKlC,MAC/BH,KAAKJ,UAAYI,KAAKmB,QAAQkB,KAAKzC,UACnCI,KAAKO,cAAgB,GAEzB,MACJ,IAAK,UACGP,KAAKG,QAAUH,KAAKmB,QAAQc,QAAQ9B,QACpCH,KAAKG,MAAQH,KAAKmB,QAAQc,QAAQ9B,MAClCH,KAAKJ,UAAYI,KAAKmB,QAAQc,QAAQrC,UACtCI,KAAKO,cAAgB,GAEzB,MACJ,IAAK,UACGP,KAAKG,QAAUH,KAAKmB,QAAQY,QAAQ5B,QACpCH,KAAKG,MAAQH,KAAKmB,QAAQY,QAAQ5B,MAClCH,KAAKJ,UAAYI,KAAKmB,QAAQY,QAAQnC,UACtCI,KAAKO,cAAgB,GAEzB,MACJ,IAAK,QACGP,KAAKG,QAAUH,KAAKmB,QAAQa,MAAM7B,QAClCH,KAAKG,MAAQH,KAAKmB,QAAQa,MAAM7B,MAChCH,KAAKJ,UAAYI,KAAKmB,QAAQa,MAAMpC,UACpCI,KAAKO,cAAgB,SA5DzBP,KAAKO,gBAAkBP,KAAKmB,QAAQa,MAAMpC,UAAY,IACtDI,KAAK0B,MAAO,EA+DxB,ECnJJ,MAAMY,EAAS,IAAItB,EAAQ,CACvBvB,SAAU,CACVK,EAAG,IACHC,EAAG,GAEHkB,SAAU,CACVnB,EAAG,EACHC,EAAG,IAEHF,OAAQ,CACJC,EAAG,EACHC,EAAG,GAEPL,SAAU,8BACVE,UAAW,EACXD,MAAO,IACPE,OAAQ,CACJC,EAAG,IACHC,EAAG,KAEPoB,QAAS,CACLe,KAAM,CACFxC,SAAU,8BACVE,UAAW,GAEfuC,IAAK,CACDzC,SAAU,6BACVE,UAAW,GAEfwC,KAAM,CACF1C,SAAU,8BACVE,UAAW,GAEfyC,KAAM,CACF3C,SAAU,8BACVE,UAAW,GAEfqC,QAAS,CACLvC,SAAU,iCACVE,UAAW,GAEfmC,QAAS,CACLrC,SAAU,qDACVE,UAAW,GAEfoC,MAAO,CACHtC,SAAU,+BACVE,UAAW,IAGfwB,UAAW,CACPvB,OAAO,CACHC,EAAG,IACHC,EAAG,IAEPE,MAAO,IACPC,OAAQ,MAKdqC,EAAQ,IAAIvB,EAAQ,CACtBvB,SAAU,CACVK,EAAG,IACHC,EAAG,KAEHkB,SAAU,CACVnB,EAAG,EACHC,EAAG,GAEHF,OAAQ,CACJC,GAAI,GACJC,EAAG,GAEPL,SAAU,wBACVE,UAAW,EACXD,MAAO,IACPE,OAAQ,CACJC,EAAG,IACHC,EAAG,KAEPoB,QAAS,CACLe,KAAM,CACFxC,SAAU,wBACVE,UAAW,GAEfuC,IAAK,CACDzC,SAAU,uBACVE,UAAW,GAEfwC,KAAM,CACF1C,SAAU,wBACVE,UAAW,GAEfyC,KAAM,CACF3C,SAAU,wBACVE,UAAW,GAEfqC,QAAS,CACLvC,SAAU,2BACVE,UAAW,GAEfmC,QAAS,CACLrC,SAAU,4BACVE,UAAW,GAEfoC,MAAO,CACHtC,SAAU,yBACVE,UAAW,IAGnBwB,UAAW,CACPvB,OAAO,CACHC,GAAI,IACJC,EAAG,IAEPE,MAAO,IACPC,OAAQ,MCnHhB,IAAIoC,EDwHwBA,ECvHxBC,EDwHuBA,ECtH3B,MAAMC,EAAa,IAAIjD,EAAQ,CAC3BE,SAAU,CACNK,EAAG,EACHC,EAAG,GAEPL,SAAU,2BAcC,MAAM+C,EACnBjD,cACA,EAIE,MAEMkD,EAAO,CACTC,EAAG,CACCC,SAAS,GAEbC,EAAG,CACCD,SAAS,GAEbE,WAAY,CACRF,SAAS,GAEbG,UAAW,CACPH,SAAS,IAOjBI,OAAOC,iBAAiB,WAAYC,IAChC,IAAKZ,EAAOZ,KAEZ,OAAQwB,EAAMC,KACV,IAAK,IACDT,EAAKG,EAAED,SAAU,EACjBN,EAAOf,QAAU,IACjB,MACJ,IAAK,IACDmB,EAAKC,EAAEC,SAAU,EACjBN,EAAOf,QAAU,IACjB,MACJ,IAAK,IACDe,EAAOrB,SAASlB,GAAK,GACrB,MACJ,IAAK,IACDuC,EAAOT,SAKnB,IAAKU,EAAMb,KAEP,OAAQwB,EAAMC,KACd,IAAK,aACGT,EAAKI,WAAWF,SAAU,EAC1BL,EAAMhB,QAAU,aAChB,MACJ,IAAK,YACDmB,EAAKK,UAAUH,SAAU,EACzBL,EAAMhB,QAAU,YAChB,MACJ,IAAK,UACDgB,EAAMtB,SAASlB,GAAK,GACpB,MACJ,IAAK,YACDwC,EAAMV,SAGlB,IAIAmB,OAAOC,iBAAiB,SAAUC,IAE9B,OAAQA,EAAMC,KACV,IAAK,IACDT,EAAKG,EAAED,SAAU,EACjB,MACJ,IAAK,IACDF,EAAKC,EAAEC,SAAU,EAIzB,OAAQM,EAAMC,KACV,IAAK,aACDT,EAAKI,WAAWF,SAAU,EAC1B,MACJ,IAAK,YACDF,EAAKK,UAAUH,SAAU,EACpB,IAIrB,IACIQ,EADAC,EAAQ,GAGL,SAASC,IACRD,EAAQ,IACRD,EAAUG,WAAWD,EAAW,KAChCD,IACA3C,SAASC,cAAc,UAAU6C,UAAYH,GAEpC,IAAVA,GACCI,EAAgB,CAACnB,OAAM,EAAEC,MAAK,EAAEa,WAGxC,CAEO,SAASM,IACZ,MAAM9B,EAASlB,SAASC,cAAc,UAChCgD,EAAI/B,EAAOhB,WAAW,MAE5B+C,EAAEC,SAAS,EAAG,EAAGhC,EAAO3B,MAAO2B,EAAO1B,QAEtC8C,OAAOa,sBAAsBH,GAC7BC,EAAEG,UAAY,QACdH,EAAEC,SAAS,EAAG,EAAGhC,EAAO3B,MAAO2B,EAAO1B,QACtCsC,EAAWzB,SAEX4C,EAAEG,UAAY,2BACdH,EAAEC,SAAS,EAAG,EAAGhC,EAAO3B,MAAO2B,EAAO1B,QACtCoC,EAAOvB,SACPwB,EAAMxB,SAENuB,EAAOrB,SAASnB,EAAI,EACpByC,EAAMtB,SAASnB,EAAI,EAInBwC,EAAOR,cAAc,QAClBY,EAAKC,EAAEC,SAA8B,MAAnBN,EAAOf,SACxBe,EAAOrB,SAASnB,GAAK,EACrBwC,EAAOR,cAAc,QACdY,EAAKG,EAAED,SAA8B,MAAnBN,EAAOf,SAChCe,EAAOrB,SAASnB,EAAI,EACpBwC,EAAOR,cAAc,QAErBQ,EAAOR,cAAc,QAGrBQ,EAAOrB,SAASlB,EAAI,EACpBuC,EAAOR,cAAc,QACdQ,EAAOrB,SAASlB,EAAI,GAC3BuC,EAAOR,cAAc,QAGtBY,EAAKK,UAAUH,SAA6B,cAAlBL,EAAMhB,SAC/BgB,EAAMtB,SAASnB,GAAK,EACpByC,EAAMT,cAAc,QACbY,EAAKI,WAAWF,SAA6B,eAAlBL,EAAMhB,SACxCgB,EAAMtB,SAASnB,EAAI,EACnByC,EAAMT,cAAc,QAEpBS,EAAMT,cAAc,QAIpBQ,EAAOrB,SAASlB,EAAI,EACpBuC,EAAOR,cAAc,QACdQ,EAAOrB,SAASlB,EAAI,GAC3BuC,EAAOR,cAAc,QAIrBiC,EAAqB,CACrBC,WAAY1B,EACZ2B,WAAY1B,KAEhBD,EAAOd,aACkB,IAAzBc,EAAO/B,gBAGHgC,EAAMR,UACNO,EAAOd,aAAc,EAErB0C,KAAKC,GAAG,eAAgB,CACpBlE,MAAOsC,EAAMd,OAAS,OAI1Ba,EAAOd,aAAwC,IAAzBc,EAAO/B,gBAC7B+B,EAAOd,aAAc,GAGrBuC,EAAqB,CACrBC,WAAYzB,EACZ0B,WAAY3B,KAEhBC,EAAMf,aACkB,IAAxBe,EAAMhC,gBAGF+B,EAAOP,UACPQ,EAAMf,aAAc,EACpB0C,KAAKC,GAAG,gBAAiB,CACrBlE,MAAOqC,EAAOb,OAAS,OAI3Bc,EAAMf,aAAuC,IAAxBe,EAAMhC,gBAC3BgC,EAAMf,aAAc,IAGrBe,EAAMd,QAAU,GAAKa,EAAOb,QAAU,IACrCgC,EAAgB,CAACnB,OAAM,EAAEC,MAAK,EAAEa,WAGxC,CAEA,SAASW,EAAqB,GAA2B,IAA3B,WAAEC,EAAU,WAAEC,GAAY,EACpD,OACID,EAAW5C,UAAU3B,SAASK,EAAIkE,EAAW5C,UAAUnB,OAASgE,EAAWxE,SAASK,GACpFkE,EAAW5C,UAAU3B,SAASK,GAAKmE,EAAWxE,SAASK,EAAImE,EAAWhE,OACtE+D,EAAW5C,UAAU3B,SAASM,EAAIiE,EAAW5C,UAAUlB,QAAS+D,EAAWxE,SAASM,GACpFiE,EAAW5C,UAAU3B,SAASM,GAAKkE,EAAWxE,SAASM,EAAIkE,EAAW/D,MAE9E,CAGA,SAASuD,EAAgB,GAAyB,IAAzB,OAACnB,EAAM,MAAEC,EAAK,QAAEa,GAAQ,EAC7C1C,SAASC,cAAc,gBAAgByD,MAAMC,QAAU,OACvDC,aAAalB,GACVd,EAAOb,SAAWc,EAAMd,OACvBf,SAASC,cAAc,gBAAgB6C,UAAY,MAC7ClB,EAAOb,OAASc,EAAMd,OAC5Bf,SAASC,cAAc,gBAAgB6C,UAAY,gBAC7ClB,EAAOb,OAASc,EAAMd,SAC5Bf,SAASC,cAAc,gBAAgB6C,UAAY,gBAE3D,CCxPA9C,SAASuC,iBAAiB,oBAAoB,WAC1C,MAAMrB,EAASlB,SAASC,cAAc,UAC5BiB,EAAOhB,WAAW,MAE5BgB,EAAO3B,MAAQ,KACf2B,EAAO1B,OAAS,IAEL,IAAIuC,EAGfiB,IACAJ,GACJ,G","sources":["webpack://castlevania97/./src/scripts/sprite.js","webpack://castlevania97/./src/scripts/fighter.js","webpack://castlevania97/./src/scripts/characters.js","webpack://castlevania97/./src/scripts/game.js","webpack://castlevania97/./src/index.js"],"sourcesContent":["export default class Sprite {\n    constructor({ position, imageSrc, scale = 1, framesMax = 1, offset = {x: 0, y: 0}}) {\n        this.position = position\n        this.width = 50\n        this.height = 150\n        this.image = new Image()\n        this.image.src = imageSrc\n        this.scale = scale\n        this.framesMax = framesMax\n        this.framesElapsed = 0\n        this.framesCurrent = 0\n        this.framesHold = 10\n        this.offset = offset\n    }\n    \n    draw() {\n        const canvas = document.querySelector('canvas');\n        const c = canvas.getContext('2d');\n\n        c.drawImage(\n            this.image, \n            this.framesCurrent * (this.image.width / this.framesMax),\n            0,\n            this.image.width / this.framesMax,\n            this.image.height,\n            this.position.x - this.offset.x, \n            this.position.y - this.offset.y, \n            (this.image.width / this.framesMax) * this.scale, \n            this.image.height * this.scale)\n    }\n    animateFrames(){\n        this.framesElapsed++\n\n        if (this.framesElapsed % this.framesHold === 0){\n            if (this.framesCurrent < this.framesMax - 1){\n                this.framesCurrent++\n            } else {\n                this.framesCurrent = 0\n            }\n        }\n    }\n    update() {\n        this.draw()\n        this.animateFrames()\n    }\n    \n\n}\n\n","import Sprite from \"./sprite.js\"\n\nexport default class Fighter extends Sprite {\n    constructor({\n        position, \n        velocity, \n        color = 'white', \n        imageSrc, \n        scale = 1, \n        framesMax = 1,\n        offset = {x: 0, y: 0},\n        sprites,\n        attackBox = {offset:{}, width: undefined, height: undefined}\n    }) {\n        super({\n            position,\n            imageSrc,\n            scale,\n            framesMax,\n            offset\n        })\n\n        this.velocity = velocity\n        this.width = 50\n        this.height = 150\n        this.lastKey\n        this.attackBox = {\n            position: {\n                x: this.position.x,\n                y: this.position.y\n            },\n            offset: attackBox.offset,\n            width: attackBox.width,\n            height: attackBox.height\n        }\n        this.color = color\n        this.isAttacking\n        this.health = 100\n        this.framesElapsed = 0\n        this.framesCurrent = 0\n        this.framesHold = 10\n        this.sprites = sprites\n        this.dead = false\n\n        for (const sprite in this.sprites){\n            sprites[sprite].image = new Image()\n            sprites[sprite].image.src = sprites[sprite].imageSrc\n        }\n\n    }\n\n    update() {\n        const canvas = document.querySelector('canvas');\n        const gravity = 0.7\n\n        this.draw()\n        if (!this.dead) this.animateFrames()\n\n        //AttachBoxes\n        this.attackBox.position.x = this.position.x + this.attackBox.offset.x\n        this.attackBox.position.y = this.position.y + this.attackBox.offset.y\n\n        this.position.x += this.velocity.x\n        this.position.y += this.velocity.y\n\n        if (this.position.y + this.height + this.velocity.y >= canvas.height - 40) {\n            this.velocity.y = 0\n            this.position.y = 387\n        } else this.velocity.y += gravity\n    }\n    attack() {\n        this.switchSprites('attack1')\n        this.isAttacking = true\n\n    }\n\n    takeHit(){\n        this.health -= 20\n        if (this.health <= 0) {\n            this.switchSprites('death')\n        }else this.switchSprites('takeHit')\n    }\n    switchSprites(sprite){\n        //Override with Death\n        if (this.image === this.sprites.death.image){\n            if (this.framesCurrent === this.sprites.death.framesMax - 1)\n                this.dead = true \n            return\n        }\n        //Override with Attack\n        if (this.image === this.sprites.attack1.image && \n            this.framesCurrent < this.sprites.attack1.framesMax - 1\n            ) \n            return\n        //Override with TakeHit\n        if (this.image === this.sprites.takeHit.image &&\n            this.framesCurrent < this.sprites.takeHit.framesMax -1)\n            return\n        switch (sprite){\n            case 'idle':\n                if (this.image !== this.sprites.idle.image){\n                    this.image = this.sprites.idle.image\n                    this.framesMax = this.sprites.idle.framesMax\n                    this.framesCurrent = 0\n                }\n                break\n            case 'run':\n                if (this.image !== this.sprites.run.image) {\n                    this.image = this.sprites.run.image\n                    this.framesMax = this.sprites.run.framesMax\n                    this.framesCurrent = 0\n                }\n                break\n            case 'jump':\n                if (this.image !== this.sprites.jump.image) {\n                    this.image = this.sprites.jump.image\n                    this.framesMax = this.sprites.jump.framesMax\n                    this.framesCurrent = 0\n                }\n                break\n            case 'fall':\n                if (this.image !== this.sprites.fall.image) {\n                    this.image = this.sprites.fall.image\n                    this.framesMax = this.sprites.fall.framesMax\n                    this.framesCurrent = 0\n                }\n                break\n            case 'attack1':\n                if (this.image !== this.sprites.attack1.image) {\n                    this.image = this.sprites.attack1.image\n                    this.framesMax = this.sprites.attack1.framesMax\n                    this.framesCurrent = 0\n                }\n                break\n            case 'takeHit':\n                if (this.image !== this.sprites.takeHit.image) {\n                    this.image = this.sprites.takeHit.image\n                    this.framesMax = this.sprites.takeHit.framesMax\n                    this.framesCurrent = 0\n                }\n                break\n            case 'death':\n                if (this.image !== this.sprites.death.image) {\n                    this.image = this.sprites.death.image\n                    this.framesMax = this.sprites.death.framesMax\n                    this.framesCurrent = 0\n                }\n                break\n        }\n    }\n}\n\n","import Fighter from \"./fighter.js\"\n\nconst player = new Fighter({\n    position: {\n    x: 256,\n    y: 0,\n        },\n    velocity: {\n    x: 0,\n    y: 10,\n    },\n    offset: {\n        x: 0,\n        y: 0\n    },\n    imageSrc: 'assets/samuraiMack/Idle.png',\n    framesMax: 8,\n    scale: 2.5,\n    offset: {\n        x: 215,\n        y: 157\n    },\n    sprites: {\n        idle: {\n            imageSrc: 'assets/samuraiMack/Idle.png',\n            framesMax: 8\n        },\n        run: {\n            imageSrc: 'assets/samuraiMack/Run.png',\n            framesMax: 8\n        },\n        jump: {\n            imageSrc: 'assets/samuraiMack/Jump.png',\n            framesMax: 2\n        },\n        fall: {\n            imageSrc: 'assets/samuraiMack/Fall.png',\n            framesMax: 2\n        },\n        attack1: {\n            imageSrc: 'assets/samuraiMack/Attack1.png',\n            framesMax: 6\n        },\n        takeHit: {\n            imageSrc: 'assets/samuraiMack/Take Hit - white silhouette.png',\n            framesMax: 4\n        },\n        death: {\n            imageSrc: 'assets/samuraiMack/Death.png',\n            framesMax: 6\n        },\n    },\n        attackBox: {\n            offset:{\n                x: 100,\n                y: 50\n            },\n            width: 160,\n            height: 50\n        }\n    \n})\n\nconst enemy = new Fighter({\n    position: {\n    x: 768,\n    y: 100,\n        },\n    velocity: {\n    x: 0,\n    y: 0,\n    },\n    offset: {\n        x: -50,\n        y: 0\n    },\n    imageSrc: 'assets/kenji/Idle.png',\n    framesMax: 4,\n    scale: 2.5,\n    offset: {\n        x: 215,\n        y: 167\n    },\n    sprites: {\n        idle: {\n            imageSrc: 'assets/kenji/Idle.png',\n            framesMax: 4\n        },\n        run: {\n            imageSrc: 'assets/kenji/Run.png',\n            framesMax: 8\n        },\n        jump: {\n            imageSrc: 'assets/kenji/Jump.png',\n            framesMax: 2\n        },\n        fall: {\n            imageSrc: 'assets/kenji/Fall.png',\n            framesMax: 2\n        },\n        attack1: {\n            imageSrc: 'assets/kenji/Attack1.png',\n            framesMax: 4\n        },\n        takeHit: {\n            imageSrc: 'assets/kenji/Take hit.png',\n            framesMax: 3\n        },\n        death: {\n            imageSrc: 'assets/kenji/Death.png',\n            framesMax: 7\n        },\n    },\n    attackBox: {\n        offset:{\n            x: -170,\n            y: 50\n        },\n        width: 170,\n        height: 50\n    }\n    \n})\n\nexport const playerSprite = player;\nexport const enemySprite = enemy;","import Sprite from \"./sprite.js\"\nimport { playerSprite, enemySprite } from \"./characters.js\";\n\n\nlet player = playerSprite;\nlet enemy = enemySprite;\n\nconst background = new Sprite ({\n    position: {\n        x: 0,\n        y: 0\n    },\n    imageSrc: 'assets/background2.png'\n})\n\n// const shop = new Sprite ({\n//     position: {\n//         x: 600,\n//         y: 128\n//     },\n//     imageSrc: 'assets/shop.png',\n//     scale: 2.75,\n//     framesMax: 6\n// })    \n\n\nexport default class Game {  \n  constructor() {\n  }\n\n}\n\n    const gravity = 0.7\n\n    const keys = {\n        a: {\n            pressed: false\n        },\n        d: {\n            pressed: false\n        },\n        ArrowRight: {\n            pressed: false\n        },\n        ArrowLeft: {\n            pressed: false\n        }\n    }\n\n    let lastKey\n\n\n    window.addEventListener('keydown', (event) => {\n        if (!player.dead){\n\n        switch (event.key){\n            case 'd':\n                keys.d.pressed = true\n                player.lastKey = 'd'\n                break\n            case 'a':\n                keys.a.pressed = true\n                player.lastKey = 'a'\n                break\n            case 'w':\n                player.velocity.y = -20\n                break\n            case 's':\n                player.attack()\n                break\n        }\n    }\n\n    if (!enemy.dead){\n\n        switch (event.key){\n        case 'ArrowRight':\n                keys.ArrowRight.pressed = true\n                enemy.lastKey = 'ArrowRight'\n                break\n            case 'ArrowLeft':\n                keys.ArrowLeft.pressed = true\n                enemy.lastKey = 'ArrowLeft'\n                break\n            case 'ArrowUp':\n                enemy.velocity.y = -20\n                break\n            case 'ArrowDown':\n                enemy.attack()\n                break\n        }\n    }\n\n    })\n\n    window.addEventListener('keyup', (event) => {\n        //Player \n        switch (event.key){\n            case 'd':\n                keys.d.pressed = false\n                break\n            case 'a':\n                keys.a.pressed = false\n                break\n        }\n        //Enemy\n        switch (event.key){\n            case 'ArrowRight':\n                keys.ArrowRight.pressed = false\n                break\n            case 'ArrowLeft':\n                keys.ArrowLeft.pressed = false\n                break\n        }\n    });\n\nlet timer = 20\nlet timerId\n\nexport function countDown() {\n    if (timer > 0) {\n        timerId = setTimeout(countDown, 1000)\n        timer--\n        document.querySelector('#timer').innerHTML = timer\n    }\n    if(timer === 0){\n        determineWinner({player, enemy, timerId})\n        \n    }\n}\n\nexport function animate(){\n    const canvas = document.querySelector('canvas');\n    const c = canvas.getContext('2d');\n\n    c.fillRect(0, 0, canvas.width, canvas.height)\n\n    window.requestAnimationFrame(animate)\n    c.fillStyle = 'black'\n    c.fillRect(0, 0, canvas.width, canvas.height)\n    background.update()\n    // shop.update()\n    c.fillStyle = 'rgba(255, 255, 255, 0.15'\n    c.fillRect(0, 0, canvas.width, canvas.height)\n    player.update()\n    enemy.update()\n\n    player.velocity.x = 0\n    enemy.velocity.x = 0\n\n\n    // Player movement\n    player.switchSprites('idle')\n    if(keys.a.pressed && player.lastKey === 'a') {\n        player.velocity.x = -5\n        player.switchSprites('run')\n    } else if (keys.d.pressed && player.lastKey === 'd') {\n        player.velocity.x = 5\n        player.switchSprites('run')\n    } else {\n        player.switchSprites('idle')\n    }\n    //Player Jumping\n    if (player.velocity.y < 0){\n        player.switchSprites('jump')\n    } else if (player.velocity.y > 0){\n        player.switchSprites('fall')\n    }\n    // Enemy momvent\n    if(keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\n        enemy.velocity.x = -5\n        enemy.switchSprites('run')\n    } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\n        enemy.velocity.x = 5\n        enemy.switchSprites('run')\n    } else {\n        enemy.switchSprites('idle')\n    }\n\n    // Enemy Jumping\n    if (player.velocity.y < 0){\n        player.switchSprites('jump')\n    } else if (player.velocity.y > 0){\n        player.switchSprites('fall')\n    }\n\n    // Detect collison & enemy gets hit\n    if (rectangularCollision({\n        rectangle1: player,\n        rectangle2: enemy\n    }) &&\n    player.isAttacking && \n    player.framesCurrent === 4\n        \n    ) {\n        enemy.takeHit()\n        player.isAttacking = false\n\n        gsap.to('#enemyHealth', {\n            width: enemy.health + '%'\n        })\n    }\n    // if player missed attack\n    if (player.isAttacking && player.framesCurrent === 4){\n        player.isAttacking = false\n    }\n    // if player gets hit\n    if (rectangularCollision({\n        rectangle1: enemy,\n        rectangle2: player\n    }) &&\n    enemy.isAttacking && \n    enemy.framesCurrent === 2\n        \n    ) {\n        player.takeHit()\n        enemy.isAttacking = false\n        gsap.to('#playerHealth', {\n            width: player.health + '%'\n        })\n    }\n    // if enemy missed attack\n    if (enemy.isAttacking && enemy.framesCurrent === 2){\n        enemy.isAttacking = false\n    }\n\n    if(enemy.health <= 0 || player.health <= 0) {\n        determineWinner({player, enemy, timerId})\n    }\n\n}\n\nfunction rectangularCollision({ rectangle1, rectangle2 }){\n    return(\n        rectangle1.attackBox.position.x + rectangle1.attackBox.width >= rectangle2.position.x && // when rectangle1'attack goes into rectangle2 position vertically\n        rectangle1.attackBox.position.x <= rectangle2.position.x + rectangle2.width && // when rectangle2's attack goes into rectangle1 vertically\n        rectangle1.attackBox.position.y + rectangle1.attackBox.height >=rectangle2.position.y && // when rectangle1'attack goes into rectangle2 position horizontally\n        rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height // when rectangle2's attack goes into rectangle1 horizontally\n    )\n}\n\n\nfunction determineWinner({player, enemy, timerId}){\n    document.querySelector('#displayText').style.display = 'flex'\n    clearTimeout(timerId)\n    if(player.health === enemy.health){\n        document.querySelector('#displayText').innerHTML = 'Tie'\n    } else if(player.health > enemy.health){\n        document.querySelector('#displayText').innerHTML = 'Player 1 Wins'\n    } else if(player.health < enemy.health){\n        document.querySelector('#displayText').innerHTML = 'Player 2 Wins'\n    }\n}\n\n\n\n\n","import Game from \"./scripts/game.js\"\nimport { animate, countDown } from \"./scripts/game.js\"\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    const canvas = document.querySelector('canvas');\n    const c = canvas.getContext('2d');\n\n    canvas.width = 1024\n    canvas.height = 576\n\n    let game = new Game();\n\n\n    animate();\n    countDown()\n});\n\n\n\n\n"],"names":["Sprite","constructor","position","imageSrc","scale","framesMax","offset","x","y","this","width","height","image","Image","src","framesElapsed","framesCurrent","framesHold","draw","document","querySelector","getContext","drawImage","animateFrames","update","Fighter","velocity","color","sprites","attackBox","undefined","super","lastKey","isAttacking","health","dead","sprite","canvas","attack","switchSprites","takeHit","death","attack1","idle","run","jump","fall","player","enemy","background","Game","keys","a","pressed","d","ArrowRight","ArrowLeft","window","addEventListener","event","key","timerId","timer","countDown","setTimeout","innerHTML","determineWinner","animate","c","fillRect","requestAnimationFrame","fillStyle","rectangularCollision","rectangle1","rectangle2","gsap","to","style","display","clearTimeout"],"sourceRoot":""}